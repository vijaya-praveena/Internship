# -*- coding: utf-8 -*-
"""SocialMedia_Engagement_Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmlUC_nEO37E5NFhUpESVyW8NaT-2mAj
"""

!pip install pandas matplotlib seaborn wordcloud textblob openpyxl scikit-learn
import nltk
nltk.download('punkt')

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np

# Load from spreadsheet
file_path = 'socialmedia_analysis.csv'  # or .csv
df = pd.read_csv(file_path)  # or pd.read_csv()

# Preview
print(df.columns)
df.dropna(subset=['text_content'], inplace=True)  # Clean missing posts
df.head()

# Drop missing posts
df = df.dropna(subset=['text_content'])

# Fill missing engagement metrics
df[['likes_count', 'shares_count', 'comments_count']] = df[['likes_count', 'shares_count', 'comments_count']].fillna(0)

# Ensure numeric
df[['likes_count', 'shares_count', 'comments_count']] = df[['likes_count', 'shares_count', 'comments_count']].astype(int)

from textblob import TextBlob

df['Polarity'] = df['text_content'].apply(lambda x: TextBlob(x).sentiment.polarity)
df['Sentiment'] = df['Polarity'].apply(lambda p: 'positive' if p > 0 else 'negative' if p < 0 else 'neutral')

df['Engagement_Score'] = df['likes_count'] + 2 * df['shares_count'] + 1.5 * df['comments_count']

# Label engagement level
def classify_engagement(score):
    if score > df['Engagement_Score'].quantile(0.75):
        return 'High'
    elif score > df['Engagement_Score'].quantile(0.4):
        return 'Medium'
    else:
        return 'Low'

df['Engagement_Level'] = df['Engagement_Score'].apply(classify_engagement)
df[['text_content', 'Engagement_Level']].head()

import matplotlib.pyplot as plt

# Engagement level distribution
df['Engagement_Level'].value_counts().plot(kind='bar', color='skyblue')
plt.title('Engagement Level Distribution')
plt.xlabel('Engagement Level')
plt.ylabel('Number of Posts')
plt.show()

# Polarity vs Score
plt.scatter(df['Polarity'], df['Engagement_Score'], alpha=0.6)
plt.title('Polarity vs Engagement Score')
plt.xlabel('Polarity')
plt.ylabel('Engagement Score')
plt.grid(True)
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix

# Encode sentiment
df['Sentiment_Code'] = LabelEncoder().fit_transform(df['Sentiment'])

# Features and target
features = df[['likes_count', 'shares_count', 'comments_count', 'Polarity', 'Sentiment_Code']]
target = df['Engagement_Level']

# Split data
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Predict and evaluate
y_pred = clf.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

